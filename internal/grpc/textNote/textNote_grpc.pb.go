// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/grpc/textNote/textNote.proto

package grpc_textNote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextNote_ListTextNote_FullMethodName   = "/TextNote/ListTextNote"
	TextNote_CreateTextNote_FullMethodName = "/TextNote/CreateTextNote"
	TextNote_UpdateTextNote_FullMethodName = "/TextNote/UpdateTextNote"
)

// TextNoteClient is the client API for TextNote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextNoteClient interface {
	ListTextNote(ctx context.Context, in *ListTextNoteRequest, opts ...grpc.CallOption) (*ListTextNoteResponse, error)
	CreateTextNote(ctx context.Context, in *CreateTextNoteRequest, opts ...grpc.CallOption) (*CreateTextNoteResponse, error)
	UpdateTextNote(ctx context.Context, in *UpdateTextNoteRequest, opts ...grpc.CallOption) (*UpdateTextNoteResponse, error)
}

type textNoteClient struct {
	cc grpc.ClientConnInterface
}

func NewTextNoteClient(cc grpc.ClientConnInterface) TextNoteClient {
	return &textNoteClient{cc}
}

func (c *textNoteClient) ListTextNote(ctx context.Context, in *ListTextNoteRequest, opts ...grpc.CallOption) (*ListTextNoteResponse, error) {
	out := new(ListTextNoteResponse)
	err := c.cc.Invoke(ctx, TextNote_ListTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textNoteClient) CreateTextNote(ctx context.Context, in *CreateTextNoteRequest, opts ...grpc.CallOption) (*CreateTextNoteResponse, error) {
	out := new(CreateTextNoteResponse)
	err := c.cc.Invoke(ctx, TextNote_CreateTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textNoteClient) UpdateTextNote(ctx context.Context, in *UpdateTextNoteRequest, opts ...grpc.CallOption) (*UpdateTextNoteResponse, error) {
	out := new(UpdateTextNoteResponse)
	err := c.cc.Invoke(ctx, TextNote_UpdateTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextNoteServer is the server API for TextNote service.
// All implementations must embed UnimplementedTextNoteServer
// for forward compatibility
type TextNoteServer interface {
	ListTextNote(context.Context, *ListTextNoteRequest) (*ListTextNoteResponse, error)
	CreateTextNote(context.Context, *CreateTextNoteRequest) (*CreateTextNoteResponse, error)
	UpdateTextNote(context.Context, *UpdateTextNoteRequest) (*UpdateTextNoteResponse, error)
	mustEmbedUnimplementedTextNoteServer()
}

// UnimplementedTextNoteServer must be embedded to have forward compatible implementations.
type UnimplementedTextNoteServer struct {
}

func (UnimplementedTextNoteServer) ListTextNote(context.Context, *ListTextNoteRequest) (*ListTextNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTextNote not implemented")
}
func (UnimplementedTextNoteServer) CreateTextNote(context.Context, *CreateTextNoteRequest) (*CreateTextNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTextNote not implemented")
}
func (UnimplementedTextNoteServer) UpdateTextNote(context.Context, *UpdateTextNoteRequest) (*UpdateTextNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextNote not implemented")
}
func (UnimplementedTextNoteServer) mustEmbedUnimplementedTextNoteServer() {}

// UnsafeTextNoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextNoteServer will
// result in compilation errors.
type UnsafeTextNoteServer interface {
	mustEmbedUnimplementedTextNoteServer()
}

func RegisterTextNoteServer(s grpc.ServiceRegistrar, srv TextNoteServer) {
	s.RegisterService(&TextNote_ServiceDesc, srv)
}

func _TextNote_ListTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTextNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextNoteServer).ListTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextNote_ListTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextNoteServer).ListTextNote(ctx, req.(*ListTextNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextNote_CreateTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextNoteServer).CreateTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextNote_CreateTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextNoteServer).CreateTextNote(ctx, req.(*CreateTextNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextNote_UpdateTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextNoteServer).UpdateTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextNote_UpdateTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextNoteServer).UpdateTextNote(ctx, req.(*UpdateTextNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextNote_ServiceDesc is the grpc.ServiceDesc for TextNote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextNote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextNote",
	HandlerType: (*TextNoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTextNote",
			Handler:    _TextNote_ListTextNote_Handler,
		},
		{
			MethodName: "CreateTextNote",
			Handler:    _TextNote_CreateTextNote_Handler,
		},
		{
			MethodName: "UpdateTextNote",
			Handler:    _TextNote_UpdateTextNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/textNote/textNote.proto",
}
