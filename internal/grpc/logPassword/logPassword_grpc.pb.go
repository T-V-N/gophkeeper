// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/grpc/logPassword/logPassword.proto

package grpc_logPassword

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogPassword_ListLogPassword_FullMethodName   = "/LogPassword/ListLogPassword"
	LogPassword_CreateLogPassword_FullMethodName = "/LogPassword/CreateLogPassword"
	LogPassword_UpdateLogPassword_FullMethodName = "/LogPassword/UpdateLogPassword"
)

// LogPasswordClient is the client API for LogPassword service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogPasswordClient interface {
	ListLogPassword(ctx context.Context, in *ListLogPasswordRequest, opts ...grpc.CallOption) (*ListLogPasswordResponse, error)
	CreateLogPassword(ctx context.Context, in *CreateLogPasswordRequest, opts ...grpc.CallOption) (*CreateLogPasswordResponse, error)
	UpdateLogPassword(ctx context.Context, in *UpdateLogPasswordRequest, opts ...grpc.CallOption) (*UpdateLogPasswordResponse, error)
}

type logPasswordClient struct {
	cc grpc.ClientConnInterface
}

func NewLogPasswordClient(cc grpc.ClientConnInterface) LogPasswordClient {
	return &logPasswordClient{cc}
}

func (c *logPasswordClient) ListLogPassword(ctx context.Context, in *ListLogPasswordRequest, opts ...grpc.CallOption) (*ListLogPasswordResponse, error) {
	out := new(ListLogPasswordResponse)
	err := c.cc.Invoke(ctx, LogPassword_ListLogPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logPasswordClient) CreateLogPassword(ctx context.Context, in *CreateLogPasswordRequest, opts ...grpc.CallOption) (*CreateLogPasswordResponse, error) {
	out := new(CreateLogPasswordResponse)
	err := c.cc.Invoke(ctx, LogPassword_CreateLogPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logPasswordClient) UpdateLogPassword(ctx context.Context, in *UpdateLogPasswordRequest, opts ...grpc.CallOption) (*UpdateLogPasswordResponse, error) {
	out := new(UpdateLogPasswordResponse)
	err := c.cc.Invoke(ctx, LogPassword_UpdateLogPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogPasswordServer is the server API for LogPassword service.
// All implementations must embed UnimplementedLogPasswordServer
// for forward compatibility
type LogPasswordServer interface {
	ListLogPassword(context.Context, *ListLogPasswordRequest) (*ListLogPasswordResponse, error)
	CreateLogPassword(context.Context, *CreateLogPasswordRequest) (*CreateLogPasswordResponse, error)
	UpdateLogPassword(context.Context, *UpdateLogPasswordRequest) (*UpdateLogPasswordResponse, error)
	mustEmbedUnimplementedLogPasswordServer()
}

// UnimplementedLogPasswordServer must be embedded to have forward compatible implementations.
type UnimplementedLogPasswordServer struct {
}

func (UnimplementedLogPasswordServer) ListLogPassword(context.Context, *ListLogPasswordRequest) (*ListLogPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogPassword not implemented")
}
func (UnimplementedLogPasswordServer) CreateLogPassword(context.Context, *CreateLogPasswordRequest) (*CreateLogPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogPassword not implemented")
}
func (UnimplementedLogPasswordServer) UpdateLogPassword(context.Context, *UpdateLogPasswordRequest) (*UpdateLogPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogPassword not implemented")
}
func (UnimplementedLogPasswordServer) mustEmbedUnimplementedLogPasswordServer() {}

// UnsafeLogPasswordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogPasswordServer will
// result in compilation errors.
type UnsafeLogPasswordServer interface {
	mustEmbedUnimplementedLogPasswordServer()
}

func RegisterLogPasswordServer(s grpc.ServiceRegistrar, srv LogPasswordServer) {
	s.RegisterService(&LogPassword_ServiceDesc, srv)
}

func _LogPassword_ListLogPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPasswordServer).ListLogPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogPassword_ListLogPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPasswordServer).ListLogPassword(ctx, req.(*ListLogPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogPassword_CreateLogPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPasswordServer).CreateLogPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogPassword_CreateLogPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPasswordServer).CreateLogPassword(ctx, req.(*CreateLogPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogPassword_UpdateLogPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPasswordServer).UpdateLogPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogPassword_UpdateLogPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPasswordServer).UpdateLogPassword(ctx, req.(*UpdateLogPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogPassword_ServiceDesc is the grpc.ServiceDesc for LogPassword service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogPassword_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LogPassword",
	HandlerType: (*LogPasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogPassword",
			Handler:    _LogPassword_ListLogPassword_Handler,
		},
		{
			MethodName: "CreateLogPassword",
			Handler:    _LogPassword_CreateLogPassword_Handler,
		},
		{
			MethodName: "UpdateLogPassword",
			Handler:    _LogPassword_UpdateLogPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/logPassword/logPassword.proto",
}
