// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/T-V-N/gophkeeper/internal/app (interfaces: LogPassword)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/T-V-N/gophkeeper/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockLogPassword is a mock of LogPassword interface.
type MockLogPassword struct {
	ctrl     *gomock.Controller
	recorder *MockLogPasswordMockRecorder
}

// MockLogPasswordMockRecorder is the mock recorder for MockLogPassword.
type MockLogPasswordMockRecorder struct {
	mock *MockLogPassword
}

// NewMockLogPassword creates a new mock instance.
func NewMockLogPassword(ctrl *gomock.Controller) *MockLogPassword {
	mock := &MockLogPassword{ctrl: ctrl}
	mock.recorder = &MockLogPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogPassword) EXPECT() *MockLogPasswordMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogPassword) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLogPasswordMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogPassword)(nil).Close))
}

// CreateLogPassword mocks base method.
func (m *MockLogPassword) CreateLogPassword(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogPassword", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogPassword indicates an expected call of CreateLogPassword.
func (mr *MockLogPasswordMockRecorder) CreateLogPassword(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogPassword", reflect.TypeOf((*MockLogPassword)(nil).CreateLogPassword), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetLogPasswordByID mocks base method.
func (m *MockLogPassword) GetLogPasswordByID(arg0 context.Context, arg1 string) (*storage.LogPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogPasswordByID", arg0, arg1)
	ret0, _ := ret[0].(*storage.LogPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogPasswordByID indicates an expected call of GetLogPasswordByID.
func (mr *MockLogPasswordMockRecorder) GetLogPasswordByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogPasswordByID", reflect.TypeOf((*MockLogPassword)(nil).GetLogPasswordByID), arg0, arg1)
}

// ListLogPasswordByUID mocks base method.
func (m *MockLogPassword) ListLogPasswordByUID(arg0 context.Context, arg1 string) ([]storage.LogPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogPasswordByUID", arg0, arg1)
	ret0, _ := ret[0].([]storage.LogPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogPasswordByUID indicates an expected call of ListLogPasswordByUID.
func (mr *MockLogPasswordMockRecorder) ListLogPasswordByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogPasswordByUID", reflect.TypeOf((*MockLogPassword)(nil).ListLogPasswordByUID), arg0, arg1)
}

// UpdateLogPassword mocks base method.
func (m *MockLogPassword) UpdateLogPassword(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogPassword", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogPassword indicates an expected call of UpdateLogPassword.
func (mr *MockLogPasswordMockRecorder) UpdateLogPassword(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogPassword", reflect.TypeOf((*MockLogPassword)(nil).UpdateLogPassword), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
