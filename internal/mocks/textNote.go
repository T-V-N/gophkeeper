// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/T-V-N/gophkeeper/internal/app (interfaces: TextNote)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/T-V-N/gophkeeper/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockTextNote is a mock of TextNote interface.
type MockTextNote struct {
	ctrl     *gomock.Controller
	recorder *MockTextNoteMockRecorder
}

// MockTextNoteMockRecorder is the mock recorder for MockTextNote.
type MockTextNoteMockRecorder struct {
	mock *MockTextNote
}

// NewMockTextNote creates a new mock instance.
func NewMockTextNote(ctrl *gomock.Controller) *MockTextNote {
	mock := &MockTextNote{ctrl: ctrl}
	mock.recorder = &MockTextNoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextNote) EXPECT() *MockTextNoteMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTextNote) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTextNoteMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTextNote)(nil).Close))
}

// CreateTextNote mocks base method.
func (m *MockTextNote) CreateTextNote(arg0 context.Context, arg1, arg2, arg3, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextNote", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTextNote indicates an expected call of CreateTextNote.
func (mr *MockTextNoteMockRecorder) CreateTextNote(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextNote", reflect.TypeOf((*MockTextNote)(nil).CreateTextNote), arg0, arg1, arg2, arg3, arg4)
}

// GetTextNoteByID mocks base method.
func (m *MockTextNote) GetTextNoteByID(arg0 context.Context, arg1 string) (*storage.TextNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextNoteByID", arg0, arg1)
	ret0, _ := ret[0].(*storage.TextNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextNoteByID indicates an expected call of GetTextNoteByID.
func (mr *MockTextNoteMockRecorder) GetTextNoteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextNoteByID", reflect.TypeOf((*MockTextNote)(nil).GetTextNoteByID), arg0, arg1)
}

// ListTextNoteByUID mocks base method.
func (m *MockTextNote) ListTextNoteByUID(arg0 context.Context, arg1 string) ([]storage.TextNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTextNoteByUID", arg0, arg1)
	ret0, _ := ret[0].([]storage.TextNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTextNoteByUID indicates an expected call of ListTextNoteByUID.
func (mr *MockTextNoteMockRecorder) ListTextNoteByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextNoteByUID", reflect.TypeOf((*MockTextNote)(nil).ListTextNoteByUID), arg0, arg1)
}

// UpdateTextNote mocks base method.
func (m *MockTextNote) UpdateTextNote(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextNote", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextNote indicates an expected call of UpdateTextNote.
func (mr *MockTextNoteMockRecorder) UpdateTextNote(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextNote", reflect.TypeOf((*MockTextNote)(nil).UpdateTextNote), arg0, arg1, arg2, arg3, arg4, arg5)
}
