// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/T-V-N/gophkeeper/internal/app (interfaces: Card)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/T-V-N/gophkeeper/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockCard is a mock of Card interface.
type MockCard struct {
	ctrl     *gomock.Controller
	recorder *MockCardMockRecorder
}

// MockCardMockRecorder is the mock recorder for MockCard.
type MockCardMockRecorder struct {
	mock *MockCard
}

// NewMockCard creates a new mock instance.
func NewMockCard(ctrl *gomock.Controller) *MockCard {
	mock := &MockCard{ctrl: ctrl}
	mock.recorder = &MockCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCard) EXPECT() *MockCardMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCard) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCardMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCard)(nil).Close))
}

// CreateCard mocks base method.
func (m *MockCard) CreateCard(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardMockRecorder) CreateCard(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCard)(nil).CreateCard), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetCardByID mocks base method.
func (m *MockCard) GetCardByID(arg0 context.Context, arg1 string) (*storage.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByID", arg0, arg1)
	ret0, _ := ret[0].(*storage.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByID indicates an expected call of GetCardByID.
func (mr *MockCardMockRecorder) GetCardByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByID", reflect.TypeOf((*MockCard)(nil).GetCardByID), arg0, arg1)
}

// ListCardByUID mocks base method.
func (m *MockCard) ListCardByUID(arg0 context.Context, arg1 string) ([]storage.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCardByUID", arg0, arg1)
	ret0, _ := ret[0].([]storage.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCardByUID indicates an expected call of ListCardByUID.
func (mr *MockCardMockRecorder) ListCardByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCardByUID", reflect.TypeOf((*MockCard)(nil).ListCardByUID), arg0, arg1)
}

// UpdateCard mocks base method.
func (m *MockCard) UpdateCard(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string, arg7 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardMockRecorder) UpdateCard(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCard)(nil).UpdateCard), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
