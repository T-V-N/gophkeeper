// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/T-V-N/gophkeeper/internal/app (interfaces: File)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/T-V-N/gophkeeper/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// CreateFile mocks base method.
func (m *MockFile) CreateFile(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileMockRecorder) CreateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFile)(nil).CreateFile), arg0, arg1, arg2)
}

// GetFileByID mocks base method.
func (m *MockFile) GetFileByID(arg0 context.Context, arg1 string) (*storage.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", arg0, arg1)
	ret0, _ := ret[0].(*storage.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockFileMockRecorder) GetFileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockFile)(nil).GetFileByID), arg0, arg1)
}

// ListFilesByUID mocks base method.
func (m *MockFile) ListFilesByUID(arg0 context.Context, arg1 string) (*[]storage.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesByUID", arg0, arg1)
	ret0, _ := ret[0].(*[]storage.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesByUID indicates an expected call of ListFilesByUID.
func (mr *MockFileMockRecorder) ListFilesByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesByUID", reflect.TypeOf((*MockFile)(nil).ListFilesByUID), arg0, arg1)
}

// UpdateFile mocks base method.
func (m *MockFile) UpdateFile(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool, arg5 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileMockRecorder) UpdateFile(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFile)(nil).UpdateFile), arg0, arg1, arg2, arg3, arg4, arg5)
}
